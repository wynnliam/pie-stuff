; Liam Wynn, 7/14/2020, Pie Learning

; Representing equality with types - now we use replace in the step case!

#lang pie

; To follow this, we need, to define +
(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (+-n-1)
    (add1 +-n-1)))

(claim +
  (-> Nat Nat
      Nat))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

; We must also define incr
(claim incr
  (-> Nat
      Nat))

(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))

(Pi ((n Nat))
  (= Nat (+ 1 n) (add1 n)))

(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))
(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
  (-> Nat
      U))

(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

; Here we will use replace instead of cong to define step-incr=add1

; If target is an (= X from to)
; and mot is an (-> X U)
; and base is a (mot from)
; then (replace target mot base) is a (mot to)

; from is (incr n-1)
; to is (add n-1)
; Base case: (mot n-1 from) => (mot n-1 (incr n-1))) => (= Nat (add1 (incr n-1)) (add1 (incr n-1))) => (same (add1 (incr n-1)))
; Step case: (mot n-1 to) => (mot n-1 (add n-1)) => (= Nat (add1 (incr n-1)) (add1 (add1 n-1)))
(claim mot-rep-step-incr=add1
  (-> Nat Nat
      U))

(define mot-rep-step-incr=add1
  (lambda (n-1 k)
    (= Nat
      (add1 (incr n-1))
      (add1 k))))

(claim step-incr=add1
  (Pi ((n-1 Nat))
    (-> (= Nat
          (incr n-1)
          (add1 n-1))
        (= Nat
          (add1
            (incr n-1))
          (add1
            (add1 n-1))))))

(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1-n-1)
      (replace incr=add1-n-1
        (mot-rep-step-incr=add1 n-1)
        (same (add1 (incr n-1)))))))

(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))