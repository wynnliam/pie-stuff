; Liam Wynn, 7/13/2020, Pie Learning

; Representing equality with types

#lang pie

; To follow this, we need, to define +
(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (+-n-1)
    (add1 +-n-1)))

(claim +
  (-> Nat Nat
      Nat))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

; We must also define incr
(claim incr
  (-> Nat
      Nat))

(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))

; (= X from to) is a type if X is a type, from is an X and to is an X
(= Nat 3 3) ; Reads (= Nat 3 3) is a type

(= Nat 14 (+ 4 3))

; "For all naturals n, (+ 1 n) and (add1 n) are the same
(Pi ((n Nat))
  (= Nat (+ 1 n) (add1 n)))

; Below is a proof that (+ 1 n) and (add1 n) are the same
; We say "I claim that for all Nats n, (+ 1 n) and (add1 n)
; are the same Nat.

; Since (+ 1) is a (lambda (j) (add1 j)), then (+ 1 n) is
; an (add1 n). Our proof is the
(claim +1=add1
  (Pi ((n Nat))
    (= Nat (+ 1 n) (add1 n))))

; And our proof is to say take any nat n, and I can construct
; (same (add1 n)), which is (= Nat (add1 n) (add1 n)) which is
; the normalized form of (= Nat (+ 1 n) (add1 n)).
(define +1=add1
  (lambda (n)
    (same (add1 n))))

; This is how we can encode statements about equality inside a type!


(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))

; (define incr=add1
;   (lambda (n)
;     (same (add1 n))))

; Doesn't work! The normal form of incr n is
; (iter-Nat n
;       1
;       (+ 1))))

; This is neutral because it cannot be further evaluted.

; This is not the same as (add1 n)

; Variables that are not defined are neutral. If the target of an eliminator expression
; is neutral, then the eliminator expression is neutral. Neutral expressions do not
; have constructors at their top.

; We can use induction to show incr = add1


(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))
(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
  (-> Nat
      U))
(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

;(claim step-incr=add1
;  (Pi ((l-1 Nat))
;    (-> (mot-incr=add1 l-1)
;        (mot-incr=add1 (add1 l-1)))))

(claim step-incr=add1
  (Pi ((n-1 Nat))
    (-> (= Nat
          (incr n-1)
          (add1 n-1))
        (= Nat
          (add1
            (incr n-1))
          (add1
            (add1 n-1))))))
(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1-n-1)
      (cong incr=add1-n-1 (+ 1)))))

; The type of incr=add1-n-1 is (= Nat (add1 n-1) (add1 n-1))
; So cong is (= Nat (+ 1 (add1 n-1)) (+ 1 (add1 n-1)))

(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))