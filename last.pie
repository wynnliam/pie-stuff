#lang pie

; Liam Wynn, 3/29/2020, Pie Learning

; How to find the last item in a list using
; dependent types.

; Suppose we have a list of three things: (a, b, c)
; To get the last one, we want  to apply tail twice,
; and head once. So basically we apply n - 1 tails and 1 head
; to a vec to get the last item.

(claim last
  (Pi ((E U)
       (l Nat))
    (-> (Vec E (add1 l))
        E)))


; base-last is a function applied to a vector
; with one item. The function should take a vector
; and return an item
(claim base-last
  (Pi ((E U))
    (-> (Vec E (add1 zero))
        E)))

(define base-last
  (lambda (E)
    (lambda (es)
      (head es))))

; The motive takes a value and returns the type for
; the inductive part of ind-Nat. So the type should be
; a function that takes a Nat and returns a Vector of 1 +
; that Nat.
(claim mot-last
  (-> U Nat
      U))

(define mot-last
  (lambda (E k)
    (-> (Vec E (add1 k))
        E)))

; step-last will take our almost complete function
; and add a tail call to it. 
(claim step-last
  (Pi ((E U)
       (l-minus-one Nat))
    (-> (mot-last E l-minus-one)
        (mot-last E (add1 l-minus-one)))))

(define step-last
  (lambda (E l-minus-one)
    (lambda (last_l-minus-one)
      (lambda (es)
        (last_l-minus-one (tail es))))))

(define last
  (lambda (E l)
    (ind-Nat l
      (mot-last E)
      (base-last E)
      (step-last E))))